// this is design for 32bit Vedic multiplier
interface ports;
  logic [31:0] a;
  logic [31:0] b;
  logic clk;
  logic reset;
  logic [63:0] out;
endinterface                 //interface is used to connect dut and testbench

function automatic logic [31:0] vedic_16X16bit(input logic [15:0] a, input logic [15:0] b); //this fiction to get 16_bit input and give 8 bit input to another fuction
  logic [15:0] pp0, pp1, pp2, pp3;
  logic [31:0] sum1, sum2;
  pp0 = vedic_8X8bit(a[7:0], b[7:0]);
  pp1 = vedic_8X8bit(a[7:0], b[15:8]);
  pp2 = vedic_8X8bit(a[15:8], b[7:0]);
  pp3 = vedic_8X8bit(a[15:8], b[15:8]);
  sum1 = {pp3, 16'b0} + {8'b0, pp2, 8'b0};
  sum2 = sum1 + {8'b0, pp1, 8'b0} + pp0;
  return sum2;
endfunction

function automatic logic [15:0] vedic_8X8bit(input logic [7:0] a, input logic [7:0] b);  // this used to multiple each bit
  logic [7:0] pp0, pp1, pp2, pp3;
  logic [15:0] sum1, sum2;
  pp0 = a[3:0] * b[3:0];
  pp1 = a[3:0] * b[7:4];
  pp2 = a[7:4] * b[3:0];
  pp3 = a[7:4] * b[7:4];
  sum1 = {pp3, 8'b0} + {4'b0, pp2, 4'b0};
  sum2 = sum1 + {4'b0, pp1, 4'b0} + pp0;
  return sum2;
endfunction

module vedic_multi_32bit(ports intf);  // main module 
  
  logic [31:0] w1, w2, w3, w4;
  logic [63:0] temp_out;
  initial begin 
    fork
    intf.a = 8'b0;
    intf.b = 8'b0;
    join
  end

  always_comb begin
      w1 <= 32'b0;
      w2 <= 32'b0;
      w3 <= 32'b0;
      w4 <= 32'b0;
    w1 = vedic_16X16bit(intf.a[15:0], intf.b[15:0]);
    w2 = vedic_16X16bit(intf.a[15:0], intf.b[31:16]);
    w3 = vedic_16X16bit(intf.a[31:16], intf.b[15:0]);
    w4 = vedic_16X16bit(intf.a[31:16], intf.b[31:16]);
    
    temp_out = {w4, 32'b0} + {16'b0, w3, 16'b0} + {16'b0, w2, 16'b0} + w1;
    intf.out = temp_out; 
  end
endmodule