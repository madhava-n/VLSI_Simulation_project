//AHB protocol practice project in UVM
`include "uvm_macros.svh"
import uvm_pkg::*;
class ahb_transaction extends uvm_sequence_item;
  rand bit [31:0] addr;
  rand bit [31:0] data;
  rand bit [2:0]  burst;
  rand bit [2:0]  size;
  rand bit [1:0]  trans;
  rand bit        write;

  `uvm_object_utils_begin(ahb_transaction)
    `uvm_field_int(addr, UVM_ALL_ON)
    `uvm_field_int(data, UVM_ALL_ON)
    `uvm_field_int(burst, UVM_ALL_ON)
    `uvm_field_int(size, UVM_ALL_ON)
    `uvm_field_int(trans, UVM_ALL_ON)
    `uvm_field_int(write, UVM_ALL_ON)
  `uvm_object_utils_end

  function new(string name = "ahb_transaction");
    super.new(name);
  endfunction
endclass

class ahb_sequence extends uvm_sequence#(ahb_transaction);
  `uvm_object_utils(ahb_sequence)

  function new(string name = "ahb_sequence");
    super.new(name);
  endfunction

  task body();
    ahb_transaction tr;
    repeat (10) begin
      tr = ahb_transaction::type_id::create("tr");
      start_item(tr);
      assert(tr.randomize());
      finish_item(tr);
    end
  endtask
endclass

class ahb_driver extends uvm_driver#(ahb_transaction);
  `uvm_component_utils(ahb_driver)

  virtual ahb_if vif;

  function new(string name, uvm_component parent);
    super.new(name, parent);
  endfunction

  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    if (!uvm_config_db#(virtual ahb_if)::get(this, "", "vif", vif))
      `uvm_fatal("NOVIF", "Virtual interface not found")
  endfunction

  task run_phase(uvm_phase phase);
    forever begin
      seq_item_port.get_next_item(req);
      drive_transaction(req);
      seq_item_port.item_done();
    end
  endtask

  task drive_transaction(ahb_transaction tr);
    @(posedge vif.HCLK);
    vif.HADDR  <= tr.addr;
    vif.HBURST <= tr.burst;
    vif.HSIZE  <= tr.size;
    vif.HTRANS <= tr.trans;
    vif.HWDATA <= tr.data;
    vif.HWRITE <= tr.write;
  endtask
endclass
    
class ahb_monitor extends uvm_monitor;
  `uvm_component_utils(ahb_monitor)

  virtual ahb_if vif;
  uvm_analysis_port#(ahb_transaction) ap;

  function new(string name, uvm_component parent);
    super.new(name, parent);
    ap = new("ap", this);
  endfunction

  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    if (!uvm_config_db#(virtual ahb_if)::get(this, "", "vif", vif))
      `uvm_fatal("NOVIF", "Virtual interface not found")
  endfunction

  task run_phase(uvm_phase phase);
    forever begin
      ahb_transaction tr;
      @(posedge vif.HCLK);
      if (vif.HRESETn && vif.HTRANS[1]) begin
        tr = ahb_transaction::type_id::create("tr");
        tr.addr  = vif.HADDR;
        tr.data  = vif.HWRITE ? vif.HWDATA : vif.HRDATA;
        tr.burst = vif.HBURST;
        tr.size  = vif.HSIZE;
        tr.trans = vif.HTRANS;
        tr.write = vif.HWRITE;
        ap.write(tr);
      end
    end
  endtask
endclass

class ahb_agent extends uvm_agent;
  `uvm_component_utils(ahb_agent)

  ahb_driver    driver;
  ahb_monitor   monitor;
  uvm_sequencer#(ahb_transaction) sequencer;

  function new(string name, uvm_component parent);
    super.new(name, parent);
  endfunction

  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    driver    = ahb_driver::type_id::create("driver", this);
    monitor   = ahb_monitor::type_id::create("monitor", this);
    sequencer = uvm_sequencer#(ahb_transaction)::type_id::create("sequencer", this);
  endfunction

  virtual function void connect_phase(uvm_phase phase);
    driver.seq_item_port.connect(sequencer.seq_item_export);
  endfunction
endclass
    
class ahb_env extends uvm_env;
  `uvm_component_utils(ahb_env)

  ahb_agent agent;

  function new(string name, uvm_component parent);
    super.new(name, parent);
  endfunction

  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    agent = ahb_agent::type_id::create("agent", this);
  endfunction
endclass
    
class ahb_test extends uvm_test;
  `uvm_component_utils(ahb_test)

  ahb_env env;
  ahb_sequence seq;

  function new(string name, uvm_component parent);
    super.new(name, parent);
  endfunction

  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    env = ahb_env::type_id::create("env", this);
    seq = ahb_sequence::type_id::create("seq");
  endfunction

  task run_phase(uvm_phase phase);
    phase.raise_objection(this);
    seq.start(env.agent.sequencer);
    phase.drop_objection(this);
  endtask
endclass
    
module tb;
  ahb_if ahb_intf();
  ahb_system dut (ahb_intf);
  
  initial begin
    ahb_intf.HCLK = 0;
    ahb_intf.HRESETn = 0;
    ahb_intf.HADDR = 32'h0;
    ahb_intf.HBURST = 3'h0;
    ahb_intf.HSIZE = 3'h0;
    ahb_intf.HTRANS = 2'h0;
    ahb_intf.HWDATA = 32'h0;
    ahb_intf.HWRITE = 1'b0;
    ahb_intf.HRDATA = 32'h0;
    ahb_intf.HRESP = 2'h0;
    ahb_intf.HSEL = 1'b0;
  end

  initial begin
    uvm_config_db#(virtual ahb_if)::set(null, "*", "vif", ahb_intf);
    run_test("ahb_test");
  end

  initial begin
    ahb_intf.HCLK = 0;
    forever #5 ahb_intf.HCLK = ~ahb_intf.HCLK;
  end

  

  initial begin
    ahb_intf.HRESETn = 1;
    #5 ahb_intf.HRESETn = 0;
  end
  initial begin
    $dumpfile("ahb_waves.vcd");
    $dumpvars(0, tb);
  end

  initial begin
    #1000;
    $finish;
  end
endmodule